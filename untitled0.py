# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1pjM4qOCCRtXzRK4NCQpV9lZWcJJ6r79O
"""

import tensorflow as tf
mnist=tf.keras.datasets.mnist
(x_train,y_train),(x_test,y_test)=mnist.load_data()
x_test.shape
x_train.shape
import matplotlib.pyplot as plt
x_train=tf.keras.utils.normalize(x_train)
x_test=tf.keras.utils.normalize(x_test)
import numpy as np
IMG_SIZE=28
x_train=np.array(x_train).reshape(-1,IMG_SIZE,IMG_SIZE,1)
x_test=np.array(x_test).reshape(-1,IMG_SIZE,IMG_SIZE,1)

from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense,Dropout,Activation,Flatten,Conv2D,MaxPooling2D

model=Sequential()

model.add(Conv2D(64,(3,3),input_shape=x_train.shape[1:]))
model.add(Activation("relu"))
model.add(MaxPooling2D(pool_size=(2,2)))

model.add(Conv2D(64,(3,3)))
model.add(Activation("relu"))
model.add(MaxPooling2D(pool_size=(2,2)))

model.add(Conv2D(64,(3,3)))
model.add(Activation("relu"))
model.add(MaxPooling2D(pool_size=(2,2)))

model.add(Flatten())
model.add(Dense(32))
model.add(Activation("relu"))


model.add(Dense(32))
model.add(Activation("relu"))

model.add(Dense(10))
model.add(Activation("softmax"))

model.compile(loss="sparse_categorical_crossentropy",optimizer="adam",metrics=['accuracy'])
model.fit(x_train,y_train,epochs=10,validation_split=0.3)
test_loss,test_acc=model.evaluate(x_test,y_test)
prediction=model.predict(x_test)
print(np.argmax(prediction[9]))
plt.imshow(x_test[9])

print(y_test[9])

# Define the image size
IMG_SIZE = 28
import cv2
import tensorflow as tf
import numpy as np

# Read the image directly into the current cell
img = cv2.imread('/content/t1.png', cv2.IMREAD_GRAYSCALE)


# Resize the image to the desired size
img_r = cv2.resize(img, (IMG_SIZE, IMG_SIZE))

# Normalize the image
img_normalized = tf.keras.utils.normalize(img_r, axis=1)

# Convert the image to a NumPy array and reshape it
img_array = np.array(img_normalized).reshape(-1, IMG_SIZE, IMG_SIZE, 1)

# Assuming 'model' is your pre-trained model
# Make predictions using the model
predictions = model.predict(img_array)

# Print the predicted class
print(np.argmax(predictions))

# Display the image
plt.figure(figsize=(5,5))
plt.imshow(img_r, cmap='gray')
plt.show()